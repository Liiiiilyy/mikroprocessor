# mikroprocessor

# 1. Uebung

## **Flip Flops（触发器）**

- D-FlipFlop（D触发器）：D触发器是一种常见的数字电路元件，用于存储和稳定输入信号。它具有一个数据输入端(D)和一个时钟输入端(Clock)。当时钟信号上升沿到来时，D触发器将D端的输入值存储到内部存储单元，并在输出端(Q)提供相应的输出信号。

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6fecec6b-a1d5-45d7-944a-042e7153fef9/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8994db65-f3de-45be-9629-63213fe72d27/Untitled.png)

- SR-FlipFlop（SR触发器）：SR触发器是一种常见的触发器类型，具有两个输入端(S和R)和一个时钟输入端(Clock)。它的状态转换取决于输入信号和当前状态。SR触发器可以用来实现各种逻辑电路和存储器。

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1c2f4688-e5fe-449f-a8b0-50449c196621/Untitled.png)

| S | R | Q | Q’ |
| --- | --- | --- | --- |
| 0 | 0 | 0 | 1 |
| 0 | 1 | 0 | 1 |
| 1 | 0 | 1 | 0 |
| 1 | 1 | ∞ | ∞ |
- JK-FlipFlop（JK触发器）：JK触发器是一种常见的触发器类型，结构上类似于SR触发器。JK触发器具有两个输入端(J和K)和一个时钟输入端(Clock)。JK触发器的输出状态取决于输入信号和当前状态。它可以用于实现各种逻辑功能和存储器。

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b090ac85-7077-4295-b7e2-c17788f99431/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2083b4ef-39ca-405b-b308-5652a24ac768/Untitled.png)

- T-FlipFlop（T触发器）：T触发器是一种特殊的触发器类型，具有一个输入端(T)和一个时钟输入端(Clock)。T触发器的输出状态在每个时钟周期的上升沿取决于输入信号和当前状态。它可以用于频率除法和计数器等应用。

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3c5d1fa3-bfed-4004-97dc-aeb6225298c9/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b4ca1e74-ac89-4233-8e02-d20a17223dee/Untitled.png)

## **Übergangs-和Beschaltungsfunktionen（转换函数和连接函数）**

### **Übergangsfunktionen（转换函数）：**

- D = u+（D = 上升沿）
- S = u+ | u=0（S = 上升沿 或 u=0）
- R = u+ | u=1（R = 上升沿 或 u=1）
- J = u+ | u=0（J = 上升沿 或 u=0）
- K = u+ | u=1（K = 上升沿 或 u=1）
- T = u+ ⊕u（T = 上升沿 异或 u）

### **Beschaltungsfunktionen（连接函数）：**

- d = u+（d = 上升沿）
- s = u+ | u=0（s = 上升沿 或 u=0）
- r = u+ | u=1（r = 上升沿 或 u=1）
- j = u+ | u=0（j = 上升沿 或 u=0）
- k = u+ | u=1（k
- k = 上升沿 或 u=1（k = 上升沿 或 u=1）
- t = 上升沿 异或 u（t = 上升沿 异或 u）

## Aufgabe 1 - Ampelsteuerung

使用一个电路设计实现一个新的人行横道的交通信号灯控制系统。在白天，交通灯应按照下面给出的周期进行控制。在夜间，只有汽车的交通灯会闪烁黄灯，人行横道的交通灯保持关闭。通过一个时钟信号控制，信号"tag"在夜间被设置为低电平，白天被设置为高电平。在从白天切换到夜间时，当前的交通灯状态应该继续运行直到结束。在从夜间切换到白天时，应从第一个交通灯状态（红-红）开始继续运行。全局时钟以所需的交通灯相位频率运行。

a) 设计一个带有适当状态编码的状态图。
b) 创建一个转移表，并确定最小的转移函数。
c) 确定所使用的Flip Flops（SR、JK、D）的连线函数。使用一个SR Flip Flop、一个JK Flip Flop和一个D Flip Flop。
d) 确定汽车交通灯红灯的驱动函数。
e) 绘制电路图。可以使用带有多个输入的逻辑门。

# Uebung 2

a) 对给定的代码进行注释，并补充在指令中使用的寻址方式。

```nasm
0x00400000 func1: addi $sp,$sp,-8           # 以立即数-8修改堆栈指针($sp)
0x00400004 sw $s0,0($sp)                    # 将寄存器$s0的值存储到堆栈中偏移量为0的位置
0x00400008 sw $s1,4($sp)                    # 将寄存器$s1的值存储到堆栈中偏移量为4的位置
0x0040000C xor $s1,$s1,$s1                   # 将寄存器$s1与自身进行异或运算，结果存储在$s1中
0x00400010 move $s0,$a0                      # 将寄存器$a0的值移动到寄存器$s0中
0x00400014 addi $a0,$a0,1                    # 将寄存器$a0的值增加1，并将结果存储在$a0中
0x00400018 loop: addi $s0,$s0,-1             # 将寄存器$s0的值减1，并将结果存储在$s0中
0x0040001C add $s1,$s1,$a0                   # 将寄存器$s1和寄存器$a0相加，并将结果存储在$s1中
0x00400024 bgt $s0,$zero,loop                # 如果$s0大于零，则跳转到标签loop处
0x00400028 srl $v0,$s1,1                     # 将寄存器$s1的值右移1位，并将结果存储在$v0中
0x0040002C lw $s1,4($sp)                     # 将堆栈中偏移量为4的值加载到寄存器$s1中
0x00400030 lw $s0,0($sp)                     # 将堆栈中偏移量为0的值加载到寄存器$s0中
0x00400034 addi $sp,$sp,8                     # 以立即数8修改堆栈指针($sp)
0x00400038 jr $ra                            # 跳转到寄存器$ra中保存的地址

```

b) 这个程序计算了一个循环中的累加和。它将输入参数 `$a0` 存储在寄存器 `$s0` 中，并对 `$a0` 进行加1操作。然后，它通过循环递减 `$s0` 的值，并将 `$a0` 累加到 `$s1` 中，直到 `$s0` 的值为零。最后，它将 `$s1` 右移1位，并将结果存储在 `$v0` 中。

c) 在地址0x40001C处，指令 'add' 的机器码表示如下：

```
Opcode: 000000
rs: 10000
rt: 10010
rd: 10001
shamt:00000
```

c) 地址0x40001C处的指令 'add' 的机器码为：**`000000 10000 10010 10001 00000 100000`**

d) Pseudobefehl 'bgt' 转化为可执行的指令如下：

```nasm

bgt $s0,$zero,loop
```

将其转换为以下两条指令：
